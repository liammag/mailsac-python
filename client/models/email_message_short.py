# coding: utf-8

"""
    mailsac API Specification

    ## About the API  The Mailsac API allows for interacting with Mailsac services, including checking email, email validations, setting up forwarding addresses, receiving web socket email messages, and sending outbound mail.  [**Get a free API key**](https://mailsac.com/api-keys)  Test the Mailsac API online:  * [**Swagger UI Explorer** &rarr;](https://mailsac.com/docs/swagger)  **Base API Endpoint**:  * `https://mailsac.com/api/` * _All API documentation is relative to this endpoint._  **OpenAPI Spec**:  * [Download JSON](https://mailsac.com/openapi.json) * [Download YAML](https://mailsac.com/openapi.yml)   ### Support and Resources  * [npm Node.js and Browser library - @mailsac/api](https://www.npmjs.com/package/@mailsac/api) * [Full Documentation and Guides](https://docs.mailsac.com) * [Community Support and Discussion Forums](https://forum.mailsac.com/forums/) * [Web socket example in Node.js - ruffrey](https://github.com/ruffrey/mailsac-node-websocket-example)  Paid Email Support, Pre-Sales    > support@team.mailsac.com  [Terms of Service](https://docs.mailsac.com/en/latest/about/terms_of_service.html)  [Privacy Policy](https://docs.mailsac.com/en/latest/about/privacy_policy.html)   # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmailMessageShort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inbox': 'EmailMessagepropertiesinbox',
        'to': 'EmailMessagepropertiesto',
        '_from': 'EmailMessagepropertiesfrom',
        'subject': 'EmailMessagepropertiessubject',
        'original_inbox': 'EmailMessagepropertiesoriginalInbox',
        'size': 'EmailMessagepropertiessize',
        'attachments': 'EmailMessagepropertiesattachments',
        'received': 'EmailMessagepropertiesreceived',
        'bcc': 'EmailMessagepropertiesbcc',
        'cc': 'EmailMessagepropertiescc',
        'domain': 'EmailMessagepropertiesdomain',
        'folder': 'EmailMessagepropertiesfolder',
        'ip': 'EmailMessagepropertiesip',
        'labels': 'EmailMessagepropertieslabels',
        'links': 'EmailMessagepropertieslinks',
        'read': 'EmailMessagepropertiesread',
        'rtls': 'EmailMessagepropertiesrtls',
        'saved_by': 'EmailMessagepropertiessavedBy',
        'spam': 'EmailMessagepropertiesspam',
        'via': 'EmailMessagepropertiesvia'
    }

    attribute_map = {
        'inbox': 'inbox',
        'to': 'to',
        '_from': 'from',
        'subject': 'subject',
        'original_inbox': 'originalInbox',
        'size': 'size',
        'attachments': 'attachments',
        'received': 'received',
        'bcc': 'bcc',
        'cc': 'cc',
        'domain': 'domain',
        'folder': 'folder',
        'ip': 'ip',
        'labels': 'labels',
        'links': 'links',
        'read': 'read',
        'rtls': 'rtls',
        'saved_by': 'savedBy',
        'spam': 'spam',
        'via': 'via'
    }

    def __init__(self, inbox=None, to=None, _from=None, subject=None, original_inbox=None, size=None, attachments=None, received=None, bcc=None, cc=None, domain=None, folder=None, ip=None, labels=None, links=None, read=None, rtls=None, saved_by=None, spam=None, via=None):  # noqa: E501
        """EmailMessageShort - a model defined in Swagger"""  # noqa: E501
        self._inbox = None
        self._to = None
        self.__from = None
        self._subject = None
        self._original_inbox = None
        self._size = None
        self._attachments = None
        self._received = None
        self._bcc = None
        self._cc = None
        self._domain = None
        self._folder = None
        self._ip = None
        self._labels = None
        self._links = None
        self._read = None
        self._rtls = None
        self._saved_by = None
        self._spam = None
        self._via = None
        self.discriminator = None
        if inbox is not None:
            self.inbox = inbox
        if to is not None:
            self.to = to
        if _from is not None:
            self._from = _from
        if subject is not None:
            self.subject = subject
        if original_inbox is not None:
            self.original_inbox = original_inbox
        if size is not None:
            self.size = size
        if attachments is not None:
            self.attachments = attachments
        if received is not None:
            self.received = received
        if bcc is not None:
            self.bcc = bcc
        if cc is not None:
            self.cc = cc
        if domain is not None:
            self.domain = domain
        if folder is not None:
            self.folder = folder
        if ip is not None:
            self.ip = ip
        if labels is not None:
            self.labels = labels
        if links is not None:
            self.links = links
        if read is not None:
            self.read = read
        if rtls is not None:
            self.rtls = rtls
        if saved_by is not None:
            self.saved_by = saved_by
        if spam is not None:
            self.spam = spam
        if via is not None:
            self.via = via

    @property
    def inbox(self):
        """Gets the inbox of this EmailMessageShort.  # noqa: E501


        :return: The inbox of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiesinbox
        """
        return self._inbox

    @inbox.setter
    def inbox(self, inbox):
        """Sets the inbox of this EmailMessageShort.


        :param inbox: The inbox of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiesinbox
        """

        self._inbox = inbox

    @property
    def to(self):
        """Gets the to of this EmailMessageShort.  # noqa: E501


        :return: The to of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiesto
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this EmailMessageShort.


        :param to: The to of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiesto
        """

        self._to = to

    @property
    def _from(self):
        """Gets the _from of this EmailMessageShort.  # noqa: E501


        :return: The _from of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiesfrom
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this EmailMessageShort.


        :param _from: The _from of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiesfrom
        """

        self.__from = _from

    @property
    def subject(self):
        """Gets the subject of this EmailMessageShort.  # noqa: E501


        :return: The subject of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiessubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EmailMessageShort.


        :param subject: The subject of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiessubject
        """

        self._subject = subject

    @property
    def original_inbox(self):
        """Gets the original_inbox of this EmailMessageShort.  # noqa: E501


        :return: The original_inbox of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiesoriginalInbox
        """
        return self._original_inbox

    @original_inbox.setter
    def original_inbox(self, original_inbox):
        """Sets the original_inbox of this EmailMessageShort.


        :param original_inbox: The original_inbox of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiesoriginalInbox
        """

        self._original_inbox = original_inbox

    @property
    def size(self):
        """Gets the size of this EmailMessageShort.  # noqa: E501


        :return: The size of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiessize
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this EmailMessageShort.


        :param size: The size of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiessize
        """

        self._size = size

    @property
    def attachments(self):
        """Gets the attachments of this EmailMessageShort.  # noqa: E501


        :return: The attachments of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiesattachments
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this EmailMessageShort.


        :param attachments: The attachments of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiesattachments
        """

        self._attachments = attachments

    @property
    def received(self):
        """Gets the received of this EmailMessageShort.  # noqa: E501


        :return: The received of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiesreceived
        """
        return self._received

    @received.setter
    def received(self, received):
        """Sets the received of this EmailMessageShort.


        :param received: The received of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiesreceived
        """

        self._received = received

    @property
    def bcc(self):
        """Gets the bcc of this EmailMessageShort.  # noqa: E501


        :return: The bcc of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiesbcc
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this EmailMessageShort.


        :param bcc: The bcc of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiesbcc
        """

        self._bcc = bcc

    @property
    def cc(self):
        """Gets the cc of this EmailMessageShort.  # noqa: E501


        :return: The cc of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiescc
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this EmailMessageShort.


        :param cc: The cc of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiescc
        """

        self._cc = cc

    @property
    def domain(self):
        """Gets the domain of this EmailMessageShort.  # noqa: E501


        :return: The domain of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiesdomain
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this EmailMessageShort.


        :param domain: The domain of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiesdomain
        """

        self._domain = domain

    @property
    def folder(self):
        """Gets the folder of this EmailMessageShort.  # noqa: E501


        :return: The folder of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiesfolder
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this EmailMessageShort.


        :param folder: The folder of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiesfolder
        """

        self._folder = folder

    @property
    def ip(self):
        """Gets the ip of this EmailMessageShort.  # noqa: E501


        :return: The ip of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiesip
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this EmailMessageShort.


        :param ip: The ip of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiesip
        """

        self._ip = ip

    @property
    def labels(self):
        """Gets the labels of this EmailMessageShort.  # noqa: E501


        :return: The labels of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertieslabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this EmailMessageShort.


        :param labels: The labels of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertieslabels
        """

        self._labels = labels

    @property
    def links(self):
        """Gets the links of this EmailMessageShort.  # noqa: E501


        :return: The links of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertieslinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EmailMessageShort.


        :param links: The links of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertieslinks
        """

        self._links = links

    @property
    def read(self):
        """Gets the read of this EmailMessageShort.  # noqa: E501


        :return: The read of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiesread
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this EmailMessageShort.


        :param read: The read of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiesread
        """

        self._read = read

    @property
    def rtls(self):
        """Gets the rtls of this EmailMessageShort.  # noqa: E501


        :return: The rtls of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiesrtls
        """
        return self._rtls

    @rtls.setter
    def rtls(self, rtls):
        """Sets the rtls of this EmailMessageShort.


        :param rtls: The rtls of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiesrtls
        """

        self._rtls = rtls

    @property
    def saved_by(self):
        """Gets the saved_by of this EmailMessageShort.  # noqa: E501


        :return: The saved_by of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiessavedBy
        """
        return self._saved_by

    @saved_by.setter
    def saved_by(self, saved_by):
        """Sets the saved_by of this EmailMessageShort.


        :param saved_by: The saved_by of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiessavedBy
        """

        self._saved_by = saved_by

    @property
    def spam(self):
        """Gets the spam of this EmailMessageShort.  # noqa: E501


        :return: The spam of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiesspam
        """
        return self._spam

    @spam.setter
    def spam(self, spam):
        """Sets the spam of this EmailMessageShort.


        :param spam: The spam of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiesspam
        """

        self._spam = spam

    @property
    def via(self):
        """Gets the via of this EmailMessageShort.  # noqa: E501


        :return: The via of this EmailMessageShort.  # noqa: E501
        :rtype: EmailMessagepropertiesvia
        """
        return self._via

    @via.setter
    def via(self, via):
        """Sets the via of this EmailMessageShort.


        :param via: The via of this EmailMessageShort.  # noqa: E501
        :type: EmailMessagepropertiesvia
        """

        self._via = via

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailMessageShort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailMessageShort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
