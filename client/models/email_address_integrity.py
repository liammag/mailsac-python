# coding: utf-8

"""
    mailsac API Specification

    ## About the API  The Mailsac API allows for interacting with Mailsac services, including checking email, email validations, setting up forwarding addresses, receiving web socket email messages, and sending outbound mail.  [**Get a free API key**](https://mailsac.com/api-keys)  Test the Mailsac API online:  * [**Swagger UI Explorer** &rarr;](https://mailsac.com/docs/swagger)  **Base API Endpoint**:  * `https://mailsac.com/api/` * _All API documentation is relative to this endpoint._  **OpenAPI Spec**:  * [Download JSON](https://mailsac.com/openapi.json) * [Download YAML](https://mailsac.com/openapi.yml)   ### Support and Resources  * [npm Node.js and Browser library - @mailsac/api](https://www.npmjs.com/package/@mailsac/api) * [Full Documentation and Guides](https://docs.mailsac.com) * [Community Support and Discussion Forums](https://forum.mailsac.com/forums/) * [Web socket example in Node.js - ruffrey](https://github.com/ruffrey/mailsac-node-websocket-example)  Paid Email Support, Pre-Sales    > support@team.mailsac.com  [Terms of Service](https://docs.mailsac.com/en/latest/about/terms_of_service.html)  [Privacy Policy](https://docs.mailsac.com/en/latest/about/privacy_policy.html)   # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmailAddressIntegrity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'valid_format': 'bool',
        'local': 'str',
        'domain': 'str',
        'is_disposable': 'bool',
        'disposable_domains': 'list[str]',
        'aliases': 'list[str]'
    }

    attribute_map = {
        'email': 'email',
        'valid_format': 'validFormat',
        'local': 'local',
        'domain': 'domain',
        'is_disposable': 'isDisposable',
        'disposable_domains': 'disposableDomains',
        'aliases': 'aliases'
    }

    def __init__(self, email=None, valid_format=None, local=None, domain=None, is_disposable=None, disposable_domains=None, aliases=None):  # noqa: E501
        """EmailAddressIntegrity - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._valid_format = None
        self._local = None
        self._domain = None
        self._is_disposable = None
        self._disposable_domains = None
        self._aliases = None
        self.discriminator = None
        self.email = email
        self.valid_format = valid_format
        if local is not None:
            self.local = local
        if domain is not None:
            self.domain = domain
        if is_disposable is not None:
            self.is_disposable = is_disposable
        if disposable_domains is not None:
            self.disposable_domains = disposable_domains
        if aliases is not None:
            self.aliases = aliases

    @property
    def email(self):
        """Gets the email of this EmailAddressIntegrity.  # noqa: E501

        Full email address that was checked.  # noqa: E501

        :return: The email of this EmailAddressIntegrity.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EmailAddressIntegrity.

        Full email address that was checked.  # noqa: E501

        :param email: The email of this EmailAddressIntegrity.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def valid_format(self):
        """Gets the valid_format of this EmailAddressIntegrity.  # noqa: E501

        Indicates if the format is valid.  # noqa: E501

        :return: The valid_format of this EmailAddressIntegrity.  # noqa: E501
        :rtype: bool
        """
        return self._valid_format

    @valid_format.setter
    def valid_format(self, valid_format):
        """Sets the valid_format of this EmailAddressIntegrity.

        Indicates if the format is valid.  # noqa: E501

        :param valid_format: The valid_format of this EmailAddressIntegrity.  # noqa: E501
        :type: bool
        """
        if valid_format is None:
            raise ValueError("Invalid value for `valid_format`, must not be `None`")  # noqa: E501

        self._valid_format = valid_format

    @property
    def local(self):
        """Gets the local of this EmailAddressIntegrity.  # noqa: E501

        The \"local part\" of the email address, before the @ symbol.  # noqa: E501

        :return: The local of this EmailAddressIntegrity.  # noqa: E501
        :rtype: str
        """
        return self._local

    @local.setter
    def local(self, local):
        """Sets the local of this EmailAddressIntegrity.

        The \"local part\" of the email address, before the @ symbol.  # noqa: E501

        :param local: The local of this EmailAddressIntegrity.  # noqa: E501
        :type: str
        """

        self._local = local

    @property
    def domain(self):
        """Gets the domain of this EmailAddressIntegrity.  # noqa: E501

        The domain of the email address which was used for evaluating disposable components, after the @ symbol.  # noqa: E501

        :return: The domain of this EmailAddressIntegrity.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this EmailAddressIntegrity.

        The domain of the email address which was used for evaluating disposable components, after the @ symbol.  # noqa: E501

        :param domain: The domain of this EmailAddressIntegrity.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def is_disposable(self):
        """Gets the is_disposable of this EmailAddressIntegrity.  # noqa: E501

        Boolean indicating if this email address is known to resolve to disposable email providers, most likely making it not useful for marketing mailing lists or signups.  # noqa: E501

        :return: The is_disposable of this EmailAddressIntegrity.  # noqa: E501
        :rtype: bool
        """
        return self._is_disposable

    @is_disposable.setter
    def is_disposable(self, is_disposable):
        """Sets the is_disposable of this EmailAddressIntegrity.

        Boolean indicating if this email address is known to resolve to disposable email providers, most likely making it not useful for marketing mailing lists or signups.  # noqa: E501

        :param is_disposable: The is_disposable of this EmailAddressIntegrity.  # noqa: E501
        :type: bool
        """

        self._is_disposable = is_disposable

    @property
    def disposable_domains(self):
        """Gets the disposable_domains of this EmailAddressIntegrity.  # noqa: E501

        Array of string domains where this email resolves to, which is helpful when the domain is custom, but receives its mail at a disposable email provider.  # noqa: E501

        :return: The disposable_domains of this EmailAddressIntegrity.  # noqa: E501
        :rtype: list[str]
        """
        return self._disposable_domains

    @disposable_domains.setter
    def disposable_domains(self, disposable_domains):
        """Sets the disposable_domains of this EmailAddressIntegrity.

        Array of string domains where this email resolves to, which is helpful when the domain is custom, but receives its mail at a disposable email provider.  # noqa: E501

        :param disposable_domains: The disposable_domains of this EmailAddressIntegrity.  # noqa: E501
        :type: list[str]
        """

        self._disposable_domains = disposable_domains

    @property
    def aliases(self):
        """Gets the aliases of this EmailAddressIntegrity.  # noqa: E501

        Array of string domains and IP addresses which are associated with the domain for this email address.  # noqa: E501

        :return: The aliases of this EmailAddressIntegrity.  # noqa: E501
        :rtype: list[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this EmailAddressIntegrity.

        Array of string domains and IP addresses which are associated with the domain for this email address.  # noqa: E501

        :param aliases: The aliases of this EmailAddressIntegrity.  # noqa: E501
        :type: list[str]
        """

        self._aliases = aliases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailAddressIntegrity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailAddressIntegrity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
