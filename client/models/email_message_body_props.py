# coding: utf-8

"""
    mailsac API Specification

    ## About the API  The Mailsac API allows for interacting with Mailsac services, including checking email, email validations, setting up forwarding addresses, receiving web socket email messages, and sending outbound mail.  [**Get a free API key**](https://mailsac.com/api-keys)  Test the Mailsac API online:  * [**Swagger UI Explorer** &rarr;](https://mailsac.com/docs/swagger)  **Base API Endpoint**:  * `https://mailsac.com/api/` * _All API documentation is relative to this endpoint._  **OpenAPI Spec**:  * [Download JSON](https://mailsac.com/openapi.json) * [Download YAML](https://mailsac.com/openapi.yml)   ### Support and Resources  * [npm Node.js and Browser library - @mailsac/api](https://www.npmjs.com/package/@mailsac/api) * [Full Documentation and Guides](https://docs.mailsac.com) * [Community Support and Discussion Forums](https://forum.mailsac.com/forums/) * [Web socket example in Node.js - ruffrey](https://github.com/ruffrey/mailsac-node-websocket-example)  Paid Email Support, Pre-Sales    > support@team.mailsac.com  [Terms of Service](https://docs.mailsac.com/en/latest/about/terms_of_service.html)  [Privacy Policy](https://docs.mailsac.com/en/latest/about/privacy_policy.html)   # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmailMessageBodyProps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'body': 'str',
        'raw': 'str',
        'headers': 'object'
    }

    attribute_map = {
        'text': 'text',
        'body': 'body',
        'raw': 'raw',
        'headers': 'headers'
    }

    def __init__(self, text=None, body=None, raw=None, headers=None):  # noqa: E501
        """EmailMessageBodyProps - a model defined in Swagger"""  # noqa: E501
        self._text = None
        self._body = None
        self._raw = None
        self._headers = None
        self.discriminator = None
        if text is not None:
            self.text = text
        if body is not None:
            self.body = body
        if raw is not None:
            self.raw = raw
        if headers is not None:
            self.headers = headers

    @property
    def text(self):
        """Gets the text of this EmailMessageBodyProps.  # noqa: E501

        Plain text email body  # noqa: E501

        :return: The text of this EmailMessageBodyProps.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this EmailMessageBodyProps.

        Plain text email body  # noqa: E501

        :param text: The text of this EmailMessageBodyProps.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def body(self):
        """Gets the body of this EmailMessageBodyProps.  # noqa: E501

        HTML email body  # noqa: E501

        :return: The body of this EmailMessageBodyProps.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this EmailMessageBodyProps.

        HTML email body  # noqa: E501

        :param body: The body of this EmailMessageBodyProps.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def raw(self):
        """Gets the raw of this EmailMessageBodyProps.  # noqa: E501

        Entire SMTP original message including headers and attachments  # noqa: E501

        :return: The raw of this EmailMessageBodyProps.  # noqa: E501
        :rtype: str
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this EmailMessageBodyProps.

        Entire SMTP original message including headers and attachments  # noqa: E501

        :param raw: The raw of this EmailMessageBodyProps.  # noqa: E501
        :type: str
        """

        self._raw = raw

    @property
    def headers(self):
        """Gets the headers of this EmailMessageBodyProps.  # noqa: E501

        Key-value pairs of headers where the value is an array of strings  # noqa: E501

        :return: The headers of this EmailMessageBodyProps.  # noqa: E501
        :rtype: object
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this EmailMessageBodyProps.

        Key-value pairs of headers where the value is an array of strings  # noqa: E501

        :param headers: The headers of this EmailMessageBodyProps.  # noqa: E501
        :type: object
        """

        self._headers = headers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailMessageBodyProps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailMessageBodyProps):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
