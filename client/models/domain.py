# coding: utf-8

"""
    mailsac API Specification

    ## About the API  The Mailsac API allows for interacting with Mailsac services, including checking email, email validations, setting up forwarding addresses, receiving web socket email messages, and sending outbound mail.  [**Get a free API key**](https://mailsac.com/api-keys)  Test the Mailsac API online:  * [**Swagger UI Explorer** &rarr;](https://mailsac.com/docs/swagger)  **Base API Endpoint**:  * `https://mailsac.com/api/` * _All API documentation is relative to this endpoint._  **OpenAPI Spec**:  * [Download JSON](https://mailsac.com/openapi.json) * [Download YAML](https://mailsac.com/openapi.yml)   ### Support and Resources  * [npm Node.js and Browser library - @mailsac/api](https://www.npmjs.com/package/@mailsac/api) * [Full Documentation and Guides](https://docs.mailsac.com) * [Community Support and Discussion Forums](https://forum.mailsac.com/forums/) * [Web socket example in Node.js - ruffrey](https://github.com/ruffrey/mailsac-node-websocket-example)  Paid Email Support, Pre-Sales    > support@team.mailsac.com  [Terms of Service](https://docs.mailsac.com/en/latest/about/terms_of_service.html)  [Privacy Policy](https://docs.mailsac.com/en/latest/about/privacy_policy.html)   # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Domain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created': 'datetime',
        'updated': 'datetime',
        'enablews': 'bool',
        'hosted': 'bool',
        'is_default': 'bool',
        'is_private': 'bool',
        'last_verification_errors': 'str',
        'owner': 'str',
        'verification_txt': 'str',
        'verified': 'bool',
        'verified_mx': 'bool'
    }

    attribute_map = {
        'id': '_id',
        'created': 'created',
        'updated': 'updated',
        'enablews': 'enablews',
        'hosted': 'hosted',
        'is_default': 'isDefault',
        'is_private': 'isPrivate',
        'last_verification_errors': 'lastVerificationErrors',
        'owner': 'owner',
        'verification_txt': 'verificationTxt',
        'verified': 'verified',
        'verified_mx': 'verifiedMx'
    }

    def __init__(self, id=None, created=None, updated=None, enablews=None, hosted=None, is_default=None, is_private=None, last_verification_errors=None, owner=None, verification_txt=None, verified=None, verified_mx=None):  # noqa: E501
        """Domain - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created = None
        self._updated = None
        self._enablews = None
        self._hosted = None
        self._is_default = None
        self._is_private = None
        self._last_verification_errors = None
        self._owner = None
        self._verification_txt = None
        self._verified = None
        self._verified_mx = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if enablews is not None:
            self.enablews = enablews
        if hosted is not None:
            self.hosted = hosted
        if is_default is not None:
            self.is_default = is_default
        if is_private is not None:
            self.is_private = is_private
        if last_verification_errors is not None:
            self.last_verification_errors = last_verification_errors
        if owner is not None:
            self.owner = owner
        if verification_txt is not None:
            self.verification_txt = verification_txt
        if verified is not None:
            self.verified = verified
        if verified_mx is not None:
            self.verified_mx = verified_mx

    @property
    def id(self):
        """Gets the id of this Domain.  # noqa: E501

        domain  # noqa: E501

        :return: The id of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Domain.

        domain  # noqa: E501

        :param id: The id of this Domain.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this Domain.  # noqa: E501

        Date domain was created  # noqa: E501

        :return: The created of this Domain.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Domain.

        Date domain was created  # noqa: E501

        :param created: The created of this Domain.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this Domain.  # noqa: E501

        Date domain settings were last updated  # noqa: E501

        :return: The updated of this Domain.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Domain.

        Date domain settings were last updated  # noqa: E501

        :param updated: The updated of this Domain.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def enablews(self):
        """Gets the enablews of this Domain.  # noqa: E501

        boolean defaulting false indicating whether to publish messages via web socket to any subscribed web socket sessions   # noqa: E501

        :return: The enablews of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._enablews

    @enablews.setter
    def enablews(self, enablews):
        """Sets the enablews of this Domain.

        boolean defaulting false indicating whether to publish messages via web socket to any subscribed web socket sessions   # noqa: E501

        :param enablews: The enablews of this Domain.  # noqa: E501
        :type: bool
        """

        self._enablews = enablews

    @property
    def hosted(self):
        """Gets the hosted of this Domain.  # noqa: E501

        boolean defaulting false indicating whether this is managed by mailsac (on msdc.co)  # noqa: E501

        :return: The hosted of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._hosted

    @hosted.setter
    def hosted(self, hosted):
        """Sets the hosted of this Domain.

        boolean defaulting false indicating whether this is managed by mailsac (on msdc.co)  # noqa: E501

        :param hosted: The hosted of this Domain.  # noqa: E501
        :type: bool
        """

        self._hosted = hosted

    @property
    def is_default(self):
        """Gets the is_default of this Domain.  # noqa: E501

        boolean defaulting false indicating whether this is the default domain for the account which will show in the sidebar first   # noqa: E501

        :return: The is_default of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Domain.

        boolean defaulting false indicating whether this is the default domain for the account which will show in the sidebar first   # noqa: E501

        :param is_default: The is_default of this Domain.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def is_private(self):
        """Gets the is_private of this Domain.  # noqa: E501

        boolean defaulting true indicating whether inboxes and messages for this domain will be visible publicly   # noqa: E501

        :return: The is_private of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this Domain.

        boolean defaulting true indicating whether inboxes and messages for this domain will be visible publicly   # noqa: E501

        :param is_private: The is_private of this Domain.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def last_verification_errors(self):
        """Gets the last_verification_errors of this Domain.  # noqa: E501

        during custom domain verification, this field indicates dns issues  # noqa: E501

        :return: The last_verification_errors of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._last_verification_errors

    @last_verification_errors.setter
    def last_verification_errors(self, last_verification_errors):
        """Sets the last_verification_errors of this Domain.

        during custom domain verification, this field indicates dns issues  # noqa: E501

        :param last_verification_errors: The last_verification_errors of this Domain.  # noqa: E501
        :type: str
        """

        self._last_verification_errors = last_verification_errors

    @property
    def owner(self):
        """Gets the owner of this Domain.  # noqa: E501

        the account to which this domain is assigned and can be managed  # noqa: E501

        :return: The owner of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Domain.

        the account to which this domain is assigned and can be managed  # noqa: E501

        :param owner: The owner of this Domain.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def verification_txt(self):
        """Gets the verification_txt of this Domain.  # noqa: E501

        during custom domain verification, this field indicates value of a TXT record that must be added to the domain's DNS settings   # noqa: E501

        :return: The verification_txt of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._verification_txt

    @verification_txt.setter
    def verification_txt(self, verification_txt):
        """Sets the verification_txt of this Domain.

        during custom domain verification, this field indicates value of a TXT record that must be added to the domain's DNS settings   # noqa: E501

        :param verification_txt: The verification_txt of this Domain.  # noqa: E501
        :type: str
        """

        self._verification_txt = verification_txt

    @property
    def verified(self):
        """Gets the verified of this Domain.  # noqa: E501

        boolean defaulting false indicating whether this domain has been verified via dns TXT record verificationTxt   # noqa: E501

        :return: The verified of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this Domain.

        boolean defaulting false indicating whether this domain has been verified via dns TXT record verificationTxt   # noqa: E501

        :param verified: The verified of this Domain.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    @property
    def verified_mx(self):
        """Gets the verified_mx of this Domain.  # noqa: E501

        boolean defaulting false indicating whether the domain will receive email successfully at Mailsac. Tthis domain has been verified via dns MX records when true.   # noqa: E501

        :return: The verified_mx of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._verified_mx

    @verified_mx.setter
    def verified_mx(self, verified_mx):
        """Sets the verified_mx of this Domain.

        boolean defaulting false indicating whether the domain will receive email successfully at Mailsac. Tthis domain has been verified via dns MX records when true.   # noqa: E501

        :param verified_mx: The verified_mx of this Domain.  # noqa: E501
        :type: bool
        """

        self._verified_mx = verified_mx

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Domain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Domain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
