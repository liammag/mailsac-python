# coding: utf-8

"""
    mailsac API Specification

    ## About the API  The Mailsac API allows for interacting with Mailsac services, including checking email, email validations, setting up forwarding addresses, receiving web socket email messages, and sending outbound mail.  [**Get a free API key**](https://mailsac.com/api-keys)  Test the Mailsac API online:  * [**Swagger UI Explorer** &rarr;](https://mailsac.com/docs/swagger)  **Base API Endpoint**:  * `https://mailsac.com/api/` * _All API documentation is relative to this endpoint._  **OpenAPI Spec**:  * [Download JSON](https://mailsac.com/openapi.json) * [Download YAML](https://mailsac.com/openapi.yml)   ### Support and Resources  * [npm Node.js and Browser library - @mailsac/api](https://www.npmjs.com/package/@mailsac/api) * [Full Documentation and Guides](https://docs.mailsac.com) * [Community Support and Discussion Forums](https://forum.mailsac.com/forums/) * [Web socket example in Node.js - ruffrey](https://github.com/ruffrey/mailsac-node-websocket-example)  Paid Email Support, Pre-Sales    > support@team.mailsac.com  [Terms of Service](https://docs.mailsac.com/en/latest/about/terms_of_service.html)  [Privacy Policy](https://docs.mailsac.com/en/latest/about/privacy_policy.html)   # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CurrentUserStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'addresses': 'list[EmailString]',
        'domains': 'list[str]',
        'starred_messages': 'int',
        'stored_messages': 'int',
        'inbox_bytes': 'int',
        'total_sent': 'int'
    }

    attribute_map = {
        'addresses': 'addresses',
        'domains': 'domains',
        'starred_messages': 'starredMessages',
        'stored_messages': 'storedMessages',
        'inbox_bytes': 'inboxBytes',
        'total_sent': 'totalSent'
    }

    def __init__(self, addresses=None, domains=None, starred_messages=None, stored_messages=None, inbox_bytes=None, total_sent=None):  # noqa: E501
        """CurrentUserStats - a model defined in Swagger"""  # noqa: E501
        self._addresses = None
        self._domains = None
        self._starred_messages = None
        self._stored_messages = None
        self._inbox_bytes = None
        self._total_sent = None
        self.discriminator = None
        if addresses is not None:
            self.addresses = addresses
        if domains is not None:
            self.domains = domains
        if starred_messages is not None:
            self.starred_messages = starred_messages
        if stored_messages is not None:
            self.stored_messages = stored_messages
        if inbox_bytes is not None:
            self.inbox_bytes = inbox_bytes
        if total_sent is not None:
            self.total_sent = total_sent

    @property
    def addresses(self):
        """Gets the addresses of this CurrentUserStats.  # noqa: E501

        List of owned email addresses  # noqa: E501

        :return: The addresses of this CurrentUserStats.  # noqa: E501
        :rtype: list[EmailString]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this CurrentUserStats.

        List of owned email addresses  # noqa: E501

        :param addresses: The addresses of this CurrentUserStats.  # noqa: E501
        :type: list[EmailString]
        """

        self._addresses = addresses

    @property
    def domains(self):
        """Gets the domains of this CurrentUserStats.  # noqa: E501

        List of custom domains  # noqa: E501

        :return: The domains of this CurrentUserStats.  # noqa: E501
        :rtype: list[str]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this CurrentUserStats.

        List of custom domains  # noqa: E501

        :param domains: The domains of this CurrentUserStats.  # noqa: E501
        :type: list[str]
        """

        self._domains = domains

    @property
    def starred_messages(self):
        """Gets the starred_messages of this CurrentUserStats.  # noqa: E501

        Total count of saved messages  # noqa: E501

        :return: The starred_messages of this CurrentUserStats.  # noqa: E501
        :rtype: int
        """
        return self._starred_messages

    @starred_messages.setter
    def starred_messages(self, starred_messages):
        """Sets the starred_messages of this CurrentUserStats.

        Total count of saved messages  # noqa: E501

        :param starred_messages: The starred_messages of this CurrentUserStats.  # noqa: E501
        :type: int
        """

        self._starred_messages = starred_messages

    @property
    def stored_messages(self):
        """Gets the stored_messages of this CurrentUserStats.  # noqa: E501

        Total messages on all private addresses and custom domains  # noqa: E501

        :return: The stored_messages of this CurrentUserStats.  # noqa: E501
        :rtype: int
        """
        return self._stored_messages

    @stored_messages.setter
    def stored_messages(self, stored_messages):
        """Sets the stored_messages of this CurrentUserStats.

        Total messages on all private addresses and custom domains  # noqa: E501

        :param stored_messages: The stored_messages of this CurrentUserStats.  # noqa: E501
        :type: int
        """

        self._stored_messages = stored_messages

    @property
    def inbox_bytes(self):
        """Gets the inbox_bytes of this CurrentUserStats.  # noqa: E501

        Sum size of all messages on private addresses and custom domains  # noqa: E501

        :return: The inbox_bytes of this CurrentUserStats.  # noqa: E501
        :rtype: int
        """
        return self._inbox_bytes

    @inbox_bytes.setter
    def inbox_bytes(self, inbox_bytes):
        """Sets the inbox_bytes of this CurrentUserStats.

        Sum size of all messages on private addresses and custom domains  # noqa: E501

        :param inbox_bytes: The inbox_bytes of this CurrentUserStats.  # noqa: E501
        :type: int
        """

        self._inbox_bytes = inbox_bytes

    @property
    def total_sent(self):
        """Gets the total_sent of this CurrentUserStats.  # noqa: E501

        Count of all outgoing messages ever sent  # noqa: E501

        :return: The total_sent of this CurrentUserStats.  # noqa: E501
        :rtype: int
        """
        return self._total_sent

    @total_sent.setter
    def total_sent(self, total_sent):
        """Sets the total_sent of this CurrentUserStats.

        Count of all outgoing messages ever sent  # noqa: E501

        :param total_sent: The total_sent of this CurrentUserStats.  # noqa: E501
        :type: int
        """

        self._total_sent = total_sent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrentUserStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrentUserStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
