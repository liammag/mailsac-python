# coding: utf-8

"""
    mailsac API Specification

    ## About the API  The Mailsac API allows for interacting with Mailsac services, including checking email, email validations, setting up forwarding addresses, receiving web socket email messages, and sending outbound mail.  [**Get a free API key**](https://mailsac.com/api-keys)  Test the Mailsac API online:  * [**Swagger UI Explorer** &rarr;](https://mailsac.com/docs/swagger)  **Base API Endpoint**:  * `https://mailsac.com/api/` * _All API documentation is relative to this endpoint._  **OpenAPI Spec**:  * [Download JSON](https://mailsac.com/openapi.json) * [Download YAML](https://mailsac.com/openapi.yml)   ### Support and Resources  * [npm Node.js and Browser library - @mailsac/api](https://www.npmjs.com/package/@mailsac/api) * [Full Documentation and Guides](https://docs.mailsac.com) * [Community Support and Discussion Forums](https://forum.mailsac.com/forums/) * [Web socket example in Node.js - ruffrey](https://github.com/ruffrey/mailsac-node-websocket-example)  Paid Email Support, Pre-Sales    > support@team.mailsac.com  [Terms of Service](https://docs.mailsac.com/en/latest/about/terms_of_service.html)  [Privacy Policy](https://docs.mailsac.com/en/latest/about/privacy_policy.html)   # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CurrentUserInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'email': 'EmailString',
        'invoice_email': 'EmailString',
        'capture_private': 'bool',
        'message_limit': 'int',
        'sends_remaining': 'int',
        'private_domain': 'int',
        'private_address_credits': 'int',
        'whitelist_access': 'int',
        'mo_api_count': 'int',
        'api_monthly_limit': 'int',
        'billing_hold': 'str',
        'disabled': 'str',
        'recents': 'list[EmailStringList]',
        'labels': 'list[str]',
        'company': 'str',
        'address': 'str'
    }

    attribute_map = {
        'id': '_id',
        'email': 'email',
        'invoice_email': 'invoiceEmail',
        'capture_private': 'capturePrivate',
        'message_limit': 'messageLimit',
        'sends_remaining': 'sendsRemaining',
        'private_domain': 'privateDomain',
        'private_address_credits': 'privateAddressCredits',
        'whitelist_access': 'whitelistAccess',
        'mo_api_count': 'moAPICount',
        'api_monthly_limit': 'apiMonthlyLimit',
        'billing_hold': 'billingHold',
        'disabled': 'disabled',
        'recents': 'recents',
        'labels': 'labels',
        'company': 'company',
        'address': 'address'
    }

    def __init__(self, id=None, email=None, invoice_email=None, capture_private=None, message_limit=None, sends_remaining=None, private_domain=None, private_address_credits=None, whitelist_access=None, mo_api_count=None, api_monthly_limit=None, billing_hold=None, disabled=None, recents=None, labels=None, company=None, address=None):  # noqa: E501
        """CurrentUserInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._email = None
        self._invoice_email = None
        self._capture_private = None
        self._message_limit = None
        self._sends_remaining = None
        self._private_domain = None
        self._private_address_credits = None
        self._whitelist_access = None
        self._mo_api_count = None
        self._api_monthly_limit = None
        self._billing_hold = None
        self._disabled = None
        self._recents = None
        self._labels = None
        self._company = None
        self._address = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if email is not None:
            self.email = email
        if invoice_email is not None:
            self.invoice_email = invoice_email
        if capture_private is not None:
            self.capture_private = capture_private
        if message_limit is not None:
            self.message_limit = message_limit
        if sends_remaining is not None:
            self.sends_remaining = sends_remaining
        if private_domain is not None:
            self.private_domain = private_domain
        if private_address_credits is not None:
            self.private_address_credits = private_address_credits
        if whitelist_access is not None:
            self.whitelist_access = whitelist_access
        if mo_api_count is not None:
            self.mo_api_count = mo_api_count
        if api_monthly_limit is not None:
            self.api_monthly_limit = api_monthly_limit
        if billing_hold is not None:
            self.billing_hold = billing_hold
        if disabled is not None:
            self.disabled = disabled
        if recents is not None:
            self.recents = recents
        if labels is not None:
            self.labels = labels
        if company is not None:
            self.company = company
        if address is not None:
            self.address = address

    @property
    def id(self):
        """Gets the id of this CurrentUserInfo.  # noqa: E501

        username  # noqa: E501

        :return: The id of this CurrentUserInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CurrentUserInfo.

        username  # noqa: E501

        :param id: The id of this CurrentUserInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this CurrentUserInfo.  # noqa: E501


        :return: The email of this CurrentUserInfo.  # noqa: E501
        :rtype: EmailString
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CurrentUserInfo.


        :param email: The email of this CurrentUserInfo.  # noqa: E501
        :type: EmailString
        """

        self._email = email

    @property
    def invoice_email(self):
        """Gets the invoice_email of this CurrentUserInfo.  # noqa: E501


        :return: The invoice_email of this CurrentUserInfo.  # noqa: E501
        :rtype: EmailString
        """
        return self._invoice_email

    @invoice_email.setter
    def invoice_email(self, invoice_email):
        """Sets the invoice_email of this CurrentUserInfo.


        :param invoice_email: The invoice_email of this CurrentUserInfo.  # noqa: E501
        :type: EmailString
        """

        self._invoice_email = invoice_email

    @property
    def capture_private(self):
        """Gets the capture_private of this CurrentUserInfo.  # noqa: E501

        Setting which will apply a star to all captured emails.  # noqa: E501

        :return: The capture_private of this CurrentUserInfo.  # noqa: E501
        :rtype: bool
        """
        return self._capture_private

    @capture_private.setter
    def capture_private(self, capture_private):
        """Sets the capture_private of this CurrentUserInfo.

        Setting which will apply a star to all captured emails.  # noqa: E501

        :param capture_private: The capture_private of this CurrentUserInfo.  # noqa: E501
        :type: bool
        """

        self._capture_private = capture_private

    @property
    def message_limit(self):
        """Gets the message_limit of this CurrentUserInfo.  # noqa: E501

        Maximum allowed message history (starred messages + all messages on private addresses and domains)  # noqa: E501

        :return: The message_limit of this CurrentUserInfo.  # noqa: E501
        :rtype: int
        """
        return self._message_limit

    @message_limit.setter
    def message_limit(self, message_limit):
        """Sets the message_limit of this CurrentUserInfo.

        Maximum allowed message history (starred messages + all messages on private addresses and domains)  # noqa: E501

        :param message_limit: The message_limit of this CurrentUserInfo.  # noqa: E501
        :type: int
        """

        self._message_limit = message_limit

    @property
    def sends_remaining(self):
        """Gets the sends_remaining of this CurrentUserInfo.  # noqa: E501

        Number of outbound recipients left to be able to send a message to  # noqa: E501

        :return: The sends_remaining of this CurrentUserInfo.  # noqa: E501
        :rtype: int
        """
        return self._sends_remaining

    @sends_remaining.setter
    def sends_remaining(self, sends_remaining):
        """Sets the sends_remaining of this CurrentUserInfo.

        Number of outbound recipients left to be able to send a message to  # noqa: E501

        :param sends_remaining: The sends_remaining of this CurrentUserInfo.  # noqa: E501
        :type: int
        """

        self._sends_remaining = sends_remaining

    @property
    def private_domain(self):
        """Gets the private_domain of this CurrentUserInfo.  # noqa: E501

        Number of custom domain that the account is entitled to but has not yet reserved  # noqa: E501

        :return: The private_domain of this CurrentUserInfo.  # noqa: E501
        :rtype: int
        """
        return self._private_domain

    @private_domain.setter
    def private_domain(self, private_domain):
        """Sets the private_domain of this CurrentUserInfo.

        Number of custom domain that the account is entitled to but has not yet reserved  # noqa: E501

        :param private_domain: The private_domain of this CurrentUserInfo.  # noqa: E501
        :type: int
        """

        self._private_domain = private_domain

    @property
    def private_address_credits(self):
        """Gets the private_address_credits of this CurrentUserInfo.  # noqa: E501

        Number of private addresses that the account is entitled to but has not yet reserved  # noqa: E501

        :return: The private_address_credits of this CurrentUserInfo.  # noqa: E501
        :rtype: int
        """
        return self._private_address_credits

    @private_address_credits.setter
    def private_address_credits(self, private_address_credits):
        """Sets the private_address_credits of this CurrentUserInfo.

        Number of private addresses that the account is entitled to but has not yet reserved  # noqa: E501

        :param private_address_credits: The private_address_credits of this CurrentUserInfo.  # noqa: E501
        :type: int
        """

        self._private_address_credits = private_address_credits

    @property
    def whitelist_access(self):
        """Gets the whitelist_access of this CurrentUserInfo.  # noqa: E501

        Flag indicating whether account is allowed to request adding IPs to the global allow-list.  # noqa: E501

        :return: The whitelist_access of this CurrentUserInfo.  # noqa: E501
        :rtype: int
        """
        return self._whitelist_access

    @whitelist_access.setter
    def whitelist_access(self, whitelist_access):
        """Sets the whitelist_access of this CurrentUserInfo.

        Flag indicating whether account is allowed to request adding IPs to the global allow-list.  # noqa: E501

        :param whitelist_access: The whitelist_access of this CurrentUserInfo.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if whitelist_access not in allowed_values:
            raise ValueError(
                "Invalid value for `whitelist_access` ({0}), must be one of {1}"  # noqa: E501
                .format(whitelist_access, allowed_values)
            )

        self._whitelist_access = whitelist_access

    @property
    def mo_api_count(self):
        """Gets the mo_api_count of this CurrentUserInfo.  # noqa: E501

        Approximate number of total API calls made by the account this month  # noqa: E501

        :return: The mo_api_count of this CurrentUserInfo.  # noqa: E501
        :rtype: int
        """
        return self._mo_api_count

    @mo_api_count.setter
    def mo_api_count(self, mo_api_count):
        """Sets the mo_api_count of this CurrentUserInfo.

        Approximate number of total API calls made by the account this month  # noqa: E501

        :param mo_api_count: The mo_api_count of this CurrentUserInfo.  # noqa: E501
        :type: int
        """

        self._mo_api_count = mo_api_count

    @property
    def api_monthly_limit(self):
        """Gets the api_monthly_limit of this CurrentUserInfo.  # noqa: E501

        Number of API calls allowed monthly  # noqa: E501

        :return: The api_monthly_limit of this CurrentUserInfo.  # noqa: E501
        :rtype: int
        """
        return self._api_monthly_limit

    @api_monthly_limit.setter
    def api_monthly_limit(self, api_monthly_limit):
        """Sets the api_monthly_limit of this CurrentUserInfo.

        Number of API calls allowed monthly  # noqa: E501

        :param api_monthly_limit: The api_monthly_limit of this CurrentUserInfo.  # noqa: E501
        :type: int
        """

        self._api_monthly_limit = api_monthly_limit

    @property
    def billing_hold(self):
        """Gets the billing_hold of this CurrentUserInfo.  # noqa: E501

        When present, indicates the account has past-due invoices and service is disabled  # noqa: E501

        :return: The billing_hold of this CurrentUserInfo.  # noqa: E501
        :rtype: str
        """
        return self._billing_hold

    @billing_hold.setter
    def billing_hold(self, billing_hold):
        """Sets the billing_hold of this CurrentUserInfo.

        When present, indicates the account has past-due invoices and service is disabled  # noqa: E501

        :param billing_hold: The billing_hold of this CurrentUserInfo.  # noqa: E501
        :type: str
        """

        self._billing_hold = billing_hold

    @property
    def disabled(self):
        """Gets the disabled of this CurrentUserInfo.  # noqa: E501

        When present, indicates a disabled account  # noqa: E501

        :return: The disabled of this CurrentUserInfo.  # noqa: E501
        :rtype: str
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this CurrentUserInfo.

        When present, indicates a disabled account  # noqa: E501

        :param disabled: The disabled of this CurrentUserInfo.  # noqa: E501
        :type: str
        """

        self._disabled = disabled

    @property
    def recents(self):
        """Gets the recents of this CurrentUserInfo.  # noqa: E501

        The most recent email addresses viewed by this account in the UI  # noqa: E501

        :return: The recents of this CurrentUserInfo.  # noqa: E501
        :rtype: list[EmailStringList]
        """
        return self._recents

    @recents.setter
    def recents(self, recents):
        """Sets the recents of this CurrentUserInfo.

        The most recent email addresses viewed by this account in the UI  # noqa: E501

        :param recents: The recents of this CurrentUserInfo.  # noqa: E501
        :type: list[EmailStringList]
        """

        self._recents = recents

    @property
    def labels(self):
        """Gets the labels of this CurrentUserInfo.  # noqa: E501

        Inbox labels created by the account  # noqa: E501

        :return: The labels of this CurrentUserInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CurrentUserInfo.

        Inbox labels created by the account  # noqa: E501

        :param labels: The labels of this CurrentUserInfo.  # noqa: E501
        :type: list[str]
        """

        self._labels = labels

    @property
    def company(self):
        """Gets the company of this CurrentUserInfo.  # noqa: E501

        Company name associated with account  # noqa: E501

        :return: The company of this CurrentUserInfo.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CurrentUserInfo.

        Company name associated with account  # noqa: E501

        :param company: The company of this CurrentUserInfo.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def address(self):
        """Gets the address of this CurrentUserInfo.  # noqa: E501

        Company address associated with account  # noqa: E501

        :return: The address of this CurrentUserInfo.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CurrentUserInfo.

        Company address associated with account  # noqa: E501

        :param address: The address of this CurrentUserInfo.  # noqa: E501
        :type: str
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrentUserInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrentUserInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
