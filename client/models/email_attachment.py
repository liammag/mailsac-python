# coding: utf-8

"""
    mailsac API Specification

    ## About the API  The Mailsac API allows for interacting with Mailsac services, including checking email, email validations, setting up forwarding addresses, receiving web socket email messages, and sending outbound mail.  [**Get a free API key**](https://mailsac.com/api-keys)  Test the Mailsac API online:  * [**Swagger UI Explorer** &rarr;](https://mailsac.com/docs/swagger)  **Base API Endpoint**:  * `https://mailsac.com/api/` * _All API documentation is relative to this endpoint._  **OpenAPI Spec**:  * [Download JSON](https://mailsac.com/openapi.json) * [Download YAML](https://mailsac.com/openapi.yml)   ### Support and Resources  * [npm Node.js and Browser library - @mailsac/api](https://www.npmjs.com/package/@mailsac/api) * [Full Documentation and Guides](https://docs.mailsac.com) * [Community Support and Discussion Forums](https://forum.mailsac.com/forums/) * [Web socket example in Node.js - ruffrey](https://github.com/ruffrey/mailsac-node-websocket-example)  Paid Email Support, Pre-Sales    > support@team.mailsac.com  [Terms of Service](https://docs.mailsac.com/en/latest/about/terms_of_service.html)  [Privacy Policy](https://docs.mailsac.com/en/latest/about/privacy_policy.html)   # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmailAttachment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cid': 'str',
        'content_disposition': 'str',
        'encoding': 'ByteEncoding',
        'filename': 'str'
    }

    attribute_map = {
        'cid': 'cid',
        'content_disposition': 'contentDisposition',
        'encoding': 'encoding',
        'filename': 'filename'
    }

    def __init__(self, cid=None, content_disposition=None, encoding=None, filename=None):  # noqa: E501
        """EmailAttachment - a model defined in Swagger"""  # noqa: E501
        self._cid = None
        self._content_disposition = None
        self._encoding = None
        self._filename = None
        self.discriminator = None
        if cid is not None:
            self.cid = cid
        if content_disposition is not None:
            self.content_disposition = content_disposition
        if encoding is not None:
            self.encoding = encoding
        if filename is not None:
            self.filename = filename

    @property
    def cid(self):
        """Gets the cid of this EmailAttachment.  # noqa: E501

        contentid  # noqa: E501

        :return: The cid of this EmailAttachment.  # noqa: E501
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this EmailAttachment.

        contentid  # noqa: E501

        :param cid: The cid of this EmailAttachment.  # noqa: E501
        :type: str
        """

        self._cid = cid

    @property
    def content_disposition(self):
        """Gets the content_disposition of this EmailAttachment.  # noqa: E501


        :return: The content_disposition of this EmailAttachment.  # noqa: E501
        :rtype: str
        """
        return self._content_disposition

    @content_disposition.setter
    def content_disposition(self, content_disposition):
        """Sets the content_disposition of this EmailAttachment.


        :param content_disposition: The content_disposition of this EmailAttachment.  # noqa: E501
        :type: str
        """

        self._content_disposition = content_disposition

    @property
    def encoding(self):
        """Gets the encoding of this EmailAttachment.  # noqa: E501


        :return: The encoding of this EmailAttachment.  # noqa: E501
        :rtype: ByteEncoding
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this EmailAttachment.


        :param encoding: The encoding of this EmailAttachment.  # noqa: E501
        :type: ByteEncoding
        """

        self._encoding = encoding

    @property
    def filename(self):
        """Gets the filename of this EmailAttachment.  # noqa: E501


        :return: The filename of this EmailAttachment.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this EmailAttachment.


        :param filename: The filename of this EmailAttachment.  # noqa: E501
        :type: str
        """

        self._filename = filename

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailAttachment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailAttachment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
