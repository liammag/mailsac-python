# coding: utf-8

"""
    mailsac API Specification

    ## About the API  The Mailsac API allows for interacting with Mailsac services, including checking email, email validations, setting up forwarding addresses, receiving web socket email messages, and sending outbound mail.  [**Get a free API key**](https://mailsac.com/api-keys)  Test the Mailsac API online:  * [**Swagger UI Explorer** &rarr;](https://mailsac.com/docs/swagger)  **Base API Endpoint**:  * `https://mailsac.com/api/` * _All API documentation is relative to this endpoint._  **OpenAPI Spec**:  * [Download JSON](https://mailsac.com/openapi.json) * [Download YAML](https://mailsac.com/openapi.yml)   ### Support and Resources  * [npm Node.js and Browser library - @mailsac/api](https://www.npmjs.com/package/@mailsac/api) * [Full Documentation and Guides](https://docs.mailsac.com) * [Community Support and Discussion Forums](https://forum.mailsac.com/forums/) * [Web socket example in Node.js - ruffrey](https://github.com/ruffrey/mailsac-node-websocket-example)  Paid Email Support, Pre-Sales    > support@team.mailsac.com  [Terms of Service](https://docs.mailsac.com/en/latest/about/terms_of_service.html)  [Privacy Policy](https://docs.mailsac.com/en/latest/about/privacy_policy.html)   # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdatePrivateAddressForwarding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'info': 'str',
        'forward': 'str',
        'enablews': 'bool',
        'webhook': 'str',
        'webhook_slack': 'str',
        'webhook_slack_to_from': 'bool'
    }

    attribute_map = {
        'info': 'info',
        'forward': 'forward',
        'enablews': 'enablews',
        'webhook': 'webhook',
        'webhook_slack': 'webhookSlack',
        'webhook_slack_to_from': 'webhookSlackToFrom'
    }

    def __init__(self, info=None, forward='', enablews=False, webhook='', webhook_slack='', webhook_slack_to_from=None):  # noqa: E501
        """UpdatePrivateAddressForwarding - a model defined in Swagger"""  # noqa: E501
        self._info = None
        self._forward = None
        self._enablews = None
        self._webhook = None
        self._webhook_slack = None
        self._webhook_slack_to_from = None
        self.discriminator = None
        if info is not None:
            self.info = info
        if forward is not None:
            self.forward = forward
        if enablews is not None:
            self.enablews = enablews
        if webhook is not None:
            self.webhook = webhook
        if webhook_slack is not None:
            self.webhook_slack = webhook_slack
        if webhook_slack_to_from is not None:
            self.webhook_slack_to_from = webhook_slack_to_from

    @property
    def info(self):
        """Gets the info of this UpdatePrivateAddressForwarding.  # noqa: E501

        User configurable metadata about this private address.  # noqa: E501

        :return: The info of this UpdatePrivateAddressForwarding.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this UpdatePrivateAddressForwarding.

        User configurable metadata about this private address.  # noqa: E501

        :param info: The info of this UpdatePrivateAddressForwarding.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def forward(self):
        """Gets the forward of this UpdatePrivateAddressForwarding.  # noqa: E501

        email address - SMTP forwarding / standard email forwarding - set to \"\" or null to disable forwarding  # noqa: E501

        :return: The forward of this UpdatePrivateAddressForwarding.  # noqa: E501
        :rtype: str
        """
        return self._forward

    @forward.setter
    def forward(self, forward):
        """Sets the forward of this UpdatePrivateAddressForwarding.

        email address - SMTP forwarding / standard email forwarding - set to \"\" or null to disable forwarding  # noqa: E501

        :param forward: The forward of this UpdatePrivateAddressForwarding.  # noqa: E501
        :type: str
        """

        self._forward = forward

    @property
    def enablews(self):
        """Gets the enablews of this UpdatePrivateAddressForwarding.  # noqa: E501

        boolean, defaults false - set to true to enable web socket forwarding (see Web Socket API)  # noqa: E501

        :return: The enablews of this UpdatePrivateAddressForwarding.  # noqa: E501
        :rtype: bool
        """
        return self._enablews

    @enablews.setter
    def enablews(self, enablews):
        """Sets the enablews of this UpdatePrivateAddressForwarding.

        boolean, defaults false - set to true to enable web socket forwarding (see Web Socket API)  # noqa: E501

        :param enablews: The enablews of this UpdatePrivateAddressForwarding.  # noqa: E501
        :type: bool
        """

        self._enablews = enablews

    @property
    def webhook(self):
        """Gets the webhook of this UpdatePrivateAddressForwarding.  # noqa: E501

        url - set to your public webhook endpoint to receive mail via webhook - set to \"\" or null to disable webhooks  # noqa: E501

        :return: The webhook of this UpdatePrivateAddressForwarding.  # noqa: E501
        :rtype: str
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this UpdatePrivateAddressForwarding.

        url - set to your public webhook endpoint to receive mail via webhook - set to \"\" or null to disable webhooks  # noqa: E501

        :param webhook: The webhook of this UpdatePrivateAddressForwarding.  # noqa: E501
        :type: str
        """

        self._webhook = webhook

    @property
    def webhook_slack(self):
        """Gets the webhook_slack of this UpdatePrivateAddressForwarding.  # noqa: E501

        Slack webhook URL where messages will be published.  # noqa: E501

        :return: The webhook_slack of this UpdatePrivateAddressForwarding.  # noqa: E501
        :rtype: str
        """
        return self._webhook_slack

    @webhook_slack.setter
    def webhook_slack(self, webhook_slack):
        """Sets the webhook_slack of this UpdatePrivateAddressForwarding.

        Slack webhook URL where messages will be published.  # noqa: E501

        :param webhook_slack: The webhook_slack of this UpdatePrivateAddressForwarding.  # noqa: E501
        :type: str
        """

        self._webhook_slack = webhook_slack

    @property
    def webhook_slack_to_from(self):
        """Gets the webhook_slack_to_from of this UpdatePrivateAddressForwarding.  # noqa: E501

        When webhookSlack is set, controls whether the message includes TO and FROM  # noqa: E501

        :return: The webhook_slack_to_from of this UpdatePrivateAddressForwarding.  # noqa: E501
        :rtype: bool
        """
        return self._webhook_slack_to_from

    @webhook_slack_to_from.setter
    def webhook_slack_to_from(self, webhook_slack_to_from):
        """Sets the webhook_slack_to_from of this UpdatePrivateAddressForwarding.

        When webhookSlack is set, controls whether the message includes TO and FROM  # noqa: E501

        :param webhook_slack_to_from: The webhook_slack_to_from of this UpdatePrivateAddressForwarding.  # noqa: E501
        :type: bool
        """

        self._webhook_slack_to_from = webhook_slack_to_from

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdatePrivateAddressForwarding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdatePrivateAddressForwarding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
