# coding: utf-8

"""
    mailsac API Specification

    ## About the API  The Mailsac API allows for interacting with Mailsac services, including checking email, email validations, setting up forwarding addresses, receiving web socket email messages, and sending outbound mail.  [**Get a free API key**](https://mailsac.com/api-keys)  Test the Mailsac API online:  * [**Swagger UI Explorer** &rarr;](https://mailsac.com/docs/swagger)  **Base API Endpoint**:  * `https://mailsac.com/api/` * _All API documentation is relative to this endpoint._  **OpenAPI Spec**:  * [Download JSON](https://mailsac.com/openapi.json) * [Download YAML](https://mailsac.com/openapi.yml)   ### Support and Resources  * [npm Node.js and Browser library - @mailsac/api](https://www.npmjs.com/package/@mailsac/api) * [Full Documentation and Guides](https://docs.mailsac.com) * [Community Support and Discussion Forums](https://forum.mailsac.com/forums/) * [Web socket example in Node.js - ruffrey](https://github.com/ruffrey/mailsac-node-websocket-example)  Paid Email Support, Pre-Sales    > support@team.mailsac.com  [Terms of Service](https://docs.mailsac.com/en/latest/about/terms_of_service.html)  [Privacy Policy](https://docs.mailsac.com/en/latest/about/privacy_policy.html)   # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmailAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'info': 'str',
        'enabledws': 'bool',
        'forward': 'str',
        'webhook': 'str',
        'webhook_slack': 'str',
        'webhook_slack_to_from': 'bool',
        'owner': 'str',
        'encrypted_inbox': 'str',
        'catch_all': 'str',
        'implicit': 'bool',
        'created': 'datetime',
        'updated': 'datetime'
    }

    attribute_map = {
        'id': '_id',
        'info': 'info',
        'enabledws': 'enabledws',
        'forward': 'forward',
        'webhook': 'webhook',
        'webhook_slack': 'webhookSlack',
        'webhook_slack_to_from': 'webhookSlackToFrom',
        'owner': 'owner',
        'encrypted_inbox': 'encryptedInbox',
        'catch_all': 'catchAll',
        'implicit': 'implicit',
        'created': 'created',
        'updated': 'updated'
    }

    def __init__(self, id=None, info=None, enabledws=None, forward=None, webhook=None, webhook_slack=None, webhook_slack_to_from=None, owner=None, encrypted_inbox=None, catch_all=None, implicit=False, created=None, updated=None):  # noqa: E501
        """EmailAddress - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._info = None
        self._enabledws = None
        self._forward = None
        self._webhook = None
        self._webhook_slack = None
        self._webhook_slack_to_from = None
        self._owner = None
        self._encrypted_inbox = None
        self._catch_all = None
        self._implicit = None
        self._created = None
        self._updated = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if info is not None:
            self.info = info
        if enabledws is not None:
            self.enabledws = enabledws
        if forward is not None:
            self.forward = forward
        if webhook is not None:
            self.webhook = webhook
        if webhook_slack is not None:
            self.webhook_slack = webhook_slack
        if webhook_slack_to_from is not None:
            self.webhook_slack_to_from = webhook_slack_to_from
        if owner is not None:
            self.owner = owner
        if encrypted_inbox is not None:
            self.encrypted_inbox = encrypted_inbox
        if catch_all is not None:
            self.catch_all = catch_all
        if implicit is not None:
            self.implicit = implicit
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated

    @property
    def id(self):
        """Gets the id of this EmailAddress.  # noqa: E501

        the unique identifier of this email address is the email address itself  # noqa: E501

        :return: The id of this EmailAddress.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmailAddress.

        the unique identifier of this email address is the email address itself  # noqa: E501

        :param id: The id of this EmailAddress.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def info(self):
        """Gets the info of this EmailAddress.  # noqa: E501

        Allows setting custom information about this email address.  # noqa: E501

        :return: The info of this EmailAddress.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this EmailAddress.

        Allows setting custom information about this email address.  # noqa: E501

        :param info: The info of this EmailAddress.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def enabledws(self):
        """Gets the enabledws of this EmailAddress.  # noqa: E501

        boolean defaulting false indicating whether to publish messages via web socket when the user owning this inbox is subscribed  # noqa: E501

        :return: The enabledws of this EmailAddress.  # noqa: E501
        :rtype: bool
        """
        return self._enabledws

    @enabledws.setter
    def enabledws(self, enabledws):
        """Sets the enabledws of this EmailAddress.

        boolean defaulting false indicating whether to publish messages via web socket when the user owning this inbox is subscribed  # noqa: E501

        :param enabledws: The enabledws of this EmailAddress.  # noqa: E501
        :type: bool
        """

        self._enabledws = enabledws

    @property
    def forward(self):
        """Gets the forward of this EmailAddress.  # noqa: E501

        email address where messages to this inbox will be forwarded  # noqa: E501

        :return: The forward of this EmailAddress.  # noqa: E501
        :rtype: str
        """
        return self._forward

    @forward.setter
    def forward(self, forward):
        """Sets the forward of this EmailAddress.

        email address where messages to this inbox will be forwarded  # noqa: E501

        :param forward: The forward of this EmailAddress.  # noqa: E501
        :type: str
        """

        self._forward = forward

    @property
    def webhook(self):
        """Gets the webhook of this EmailAddress.  # noqa: E501

        URL where messages to this inbox will be forwarded  # noqa: E501

        :return: The webhook of this EmailAddress.  # noqa: E501
        :rtype: str
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this EmailAddress.

        URL where messages to this inbox will be forwarded  # noqa: E501

        :param webhook: The webhook of this EmailAddress.  # noqa: E501
        :type: str
        """

        self._webhook = webhook

    @property
    def webhook_slack(self):
        """Gets the webhook_slack of this EmailAddress.  # noqa: E501

        Slack webhook endpoint where messages should be published  # noqa: E501

        :return: The webhook_slack of this EmailAddress.  # noqa: E501
        :rtype: str
        """
        return self._webhook_slack

    @webhook_slack.setter
    def webhook_slack(self, webhook_slack):
        """Sets the webhook_slack of this EmailAddress.

        Slack webhook endpoint where messages should be published  # noqa: E501

        :param webhook_slack: The webhook_slack of this EmailAddress.  # noqa: E501
        :type: str
        """

        self._webhook_slack = webhook_slack

    @property
    def webhook_slack_to_from(self):
        """Gets the webhook_slack_to_from of this EmailAddress.  # noqa: E501

        When webhookSlack is set, controls whether the message includes TO and FROM  # noqa: E501

        :return: The webhook_slack_to_from of this EmailAddress.  # noqa: E501
        :rtype: bool
        """
        return self._webhook_slack_to_from

    @webhook_slack_to_from.setter
    def webhook_slack_to_from(self, webhook_slack_to_from):
        """Sets the webhook_slack_to_from of this EmailAddress.

        When webhookSlack is set, controls whether the message includes TO and FROM  # noqa: E501

        :param webhook_slack_to_from: The webhook_slack_to_from of this EmailAddress.  # noqa: E501
        :type: bool
        """

        self._webhook_slack_to_from = webhook_slack_to_from

    @property
    def owner(self):
        """Gets the owner of this EmailAddress.  # noqa: E501

        Account that owns the address (owns the privacy)  # noqa: E501

        :return: The owner of this EmailAddress.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this EmailAddress.

        Account that owns the address (owns the privacy)  # noqa: E501

        :param owner: The owner of this EmailAddress.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def encrypted_inbox(self):
        """Gets the encrypted_inbox of this EmailAddress.  # noqa: E501

        An alternate email address that will result in the message being delivered to this inbox. This is not always present.  # noqa: E501

        :return: The encrypted_inbox of this EmailAddress.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_inbox

    @encrypted_inbox.setter
    def encrypted_inbox(self, encrypted_inbox):
        """Sets the encrypted_inbox of this EmailAddress.

        An alternate email address that will result in the message being delivered to this inbox. This is not always present.  # noqa: E501

        :param encrypted_inbox: The encrypted_inbox of this EmailAddress.  # noqa: E501
        :type: str
        """

        self._encrypted_inbox = encrypted_inbox

    @property
    def catch_all(self):
        """Gets the catch_all of this EmailAddress.  # noqa: E501

        Indicates whether this is a catch-all address, and for which domain.  # noqa: E501

        :return: The catch_all of this EmailAddress.  # noqa: E501
        :rtype: str
        """
        return self._catch_all

    @catch_all.setter
    def catch_all(self, catch_all):
        """Sets the catch_all of this EmailAddress.

        Indicates whether this is a catch-all address, and for which domain.  # noqa: E501

        :param catch_all: The catch_all of this EmailAddress.  # noqa: E501
        :type: str
        """

        self._catch_all = catch_all

    @property
    def implicit(self):
        """Gets the implicit of this EmailAddress.  # noqa: E501

        When the user owns the domain but has not reserved the address individually, this field is set to true.  # noqa: E501

        :return: The implicit of this EmailAddress.  # noqa: E501
        :rtype: bool
        """
        return self._implicit

    @implicit.setter
    def implicit(self, implicit):
        """Sets the implicit of this EmailAddress.

        When the user owns the domain but has not reserved the address individually, this field is set to true.  # noqa: E501

        :param implicit: The implicit of this EmailAddress.  # noqa: E501
        :type: bool
        """

        self._implicit = implicit

    @property
    def created(self):
        """Gets the created of this EmailAddress.  # noqa: E501


        :return: The created of this EmailAddress.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this EmailAddress.


        :param created: The created of this EmailAddress.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this EmailAddress.  # noqa: E501


        :return: The updated of this EmailAddress.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this EmailAddress.


        :param updated: The updated of this EmailAddress.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
