# coding: utf-8

"""
    mailsac API Specification

    ## About the API  The Mailsac API allows for interacting with Mailsac services, including checking email, email validations, setting up forwarding addresses, receiving web socket email messages, and sending outbound mail.  [**Get a free API key**](https://mailsac.com/api-keys)  Test the Mailsac API online:  * [**Swagger UI Explorer** &rarr;](https://mailsac.com/docs/swagger)  **Base API Endpoint**:  * `https://mailsac.com/api/` * _All API documentation is relative to this endpoint._  **OpenAPI Spec**:  * [Download JSON](https://mailsac.com/openapi.json) * [Download YAML](https://mailsac.com/openapi.yml)   ### Support and Resources  * [npm Node.js and Browser library - @mailsac/api](https://www.npmjs.com/package/@mailsac/api) * [Full Documentation and Guides](https://docs.mailsac.com) * [Community Support and Discussion Forums](https://forum.mailsac.com/forums/) * [Web socket example in Node.js - ruffrey](https://github.com/ruffrey/mailsac-node-websocket-example)  Paid Email Support, Pre-Sales    > support@team.mailsac.com  [Terms of Service](https://docs.mailsac.com/en/latest/about/terms_of_service.html)  [Privacy Policy](https://docs.mailsac.com/en/latest/about/privacy_policy.html)   # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AttachmentMeta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'checksum': 'Md5sum',
        'content_disposition': 'str',
        'content_id': 'AttachmentIdentifier',
        'content_type': 'str',
        'file_name': 'str',
        'length': 'int',
        'transfer_encoding': 'str'
    }

    attribute_map = {
        'checksum': 'checksum',
        'content_disposition': 'contentDisposition',
        'content_id': 'contentId',
        'content_type': 'contentType',
        'file_name': 'fileName',
        'length': 'length',
        'transfer_encoding': 'transferEncoding'
    }

    def __init__(self, checksum=None, content_disposition=None, content_id=None, content_type=None, file_name=None, length=None, transfer_encoding=None):  # noqa: E501
        """AttachmentMeta - a model defined in Swagger"""  # noqa: E501
        self._checksum = None
        self._content_disposition = None
        self._content_id = None
        self._content_type = None
        self._file_name = None
        self._length = None
        self._transfer_encoding = None
        self.discriminator = None
        if checksum is not None:
            self.checksum = checksum
        if content_disposition is not None:
            self.content_disposition = content_disposition
        if content_id is not None:
            self.content_id = content_id
        if content_type is not None:
            self.content_type = content_type
        if file_name is not None:
            self.file_name = file_name
        if length is not None:
            self.length = length
        if transfer_encoding is not None:
            self.transfer_encoding = transfer_encoding

    @property
    def checksum(self):
        """Gets the checksum of this AttachmentMeta.  # noqa: E501


        :return: The checksum of this AttachmentMeta.  # noqa: E501
        :rtype: Md5sum
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this AttachmentMeta.


        :param checksum: The checksum of this AttachmentMeta.  # noqa: E501
        :type: Md5sum
        """

        self._checksum = checksum

    @property
    def content_disposition(self):
        """Gets the content_disposition of this AttachmentMeta.  # noqa: E501

        TODO: describe  # noqa: E501

        :return: The content_disposition of this AttachmentMeta.  # noqa: E501
        :rtype: str
        """
        return self._content_disposition

    @content_disposition.setter
    def content_disposition(self, content_disposition):
        """Sets the content_disposition of this AttachmentMeta.

        TODO: describe  # noqa: E501

        :param content_disposition: The content_disposition of this AttachmentMeta.  # noqa: E501
        :type: str
        """

        self._content_disposition = content_disposition

    @property
    def content_id(self):
        """Gets the content_id of this AttachmentMeta.  # noqa: E501


        :return: The content_id of this AttachmentMeta.  # noqa: E501
        :rtype: AttachmentIdentifier
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """Sets the content_id of this AttachmentMeta.


        :param content_id: The content_id of this AttachmentMeta.  # noqa: E501
        :type: AttachmentIdentifier
        """

        self._content_id = content_id

    @property
    def content_type(self):
        """Gets the content_type of this AttachmentMeta.  # noqa: E501

        Content type of the attachment  # noqa: E501

        :return: The content_type of this AttachmentMeta.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this AttachmentMeta.

        Content type of the attachment  # noqa: E501

        :param content_type: The content_type of this AttachmentMeta.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def file_name(self):
        """Gets the file_name of this AttachmentMeta.  # noqa: E501

        Filename of attachment  # noqa: E501

        :return: The file_name of this AttachmentMeta.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this AttachmentMeta.

        Filename of attachment  # noqa: E501

        :param file_name: The file_name of this AttachmentMeta.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def length(self):
        """Gets the length of this AttachmentMeta.  # noqa: E501

        length of attachment  # noqa: E501

        :return: The length of this AttachmentMeta.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this AttachmentMeta.

        length of attachment  # noqa: E501

        :param length: The length of this AttachmentMeta.  # noqa: E501
        :type: int
        """

        self._length = length

    @property
    def transfer_encoding(self):
        """Gets the transfer_encoding of this AttachmentMeta.  # noqa: E501

        Encoding used for attachment  # noqa: E501

        :return: The transfer_encoding of this AttachmentMeta.  # noqa: E501
        :rtype: str
        """
        return self._transfer_encoding

    @transfer_encoding.setter
    def transfer_encoding(self, transfer_encoding):
        """Sets the transfer_encoding of this AttachmentMeta.

        Encoding used for attachment  # noqa: E501

        :param transfer_encoding: The transfer_encoding of this AttachmentMeta.  # noqa: E501
        :type: str
        """

        self._transfer_encoding = transfer_encoding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttachmentMeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
