# coding: utf-8

"""
    mailsac API Specification

    ## About the API  The Mailsac API allows for interacting with Mailsac services, including checking email, email validations, setting up forwarding addresses, receiving web socket email messages, and sending outbound mail.  [**Get a free API key**](https://mailsac.com/api-keys)  Test the Mailsac API online:  * [**Swagger UI Explorer** &rarr;](https://mailsac.com/docs/swagger)  **Base API Endpoint**:  * `https://mailsac.com/api/` * _All API documentation is relative to this endpoint._  **OpenAPI Spec**:  * [Download JSON](https://mailsac.com/openapi.json) * [Download YAML](https://mailsac.com/openapi.yml)   ### Support and Resources  * [npm Node.js and Browser library - @mailsac/api](https://www.npmjs.com/package/@mailsac/api) * [Full Documentation and Guides](https://docs.mailsac.com) * [Community Support and Discussion Forums](https://forum.mailsac.com/forums/) * [Web socket example in Node.js - ruffrey](https://github.com/ruffrey/mailsac-node-websocket-example)  Paid Email Support, Pre-Sales    > support@team.mailsac.com  [Terms of Service](https://docs.mailsac.com/en/latest/about/terms_of_service.html)  [Privacy Policy](https://docs.mailsac.com/en/latest/about/privacy_policy.html)   # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from client.api_client import ApiClient


class AttachmentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def count_public_attachments(self, md5sum, **kwargs):  # noqa: E501
        """Count public attachments  # noqa: E501

        Provides count of attachments by md5 sum  Responds with 'Failed to fetch' in swagger editor, works in curl with generated example   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_public_attachments(md5sum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Md5sum md5sum: md5 sum of an attachment (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.count_public_attachments_with_http_info(md5sum, **kwargs)  # noqa: E501
        else:
            (data) = self.count_public_attachments_with_http_info(md5sum, **kwargs)  # noqa: E501
            return data

    def count_public_attachments_with_http_info(self, md5sum, **kwargs):  # noqa: E501
        """Count public attachments  # noqa: E501

        Provides count of attachments by md5 sum  Responds with 'Failed to fetch' in swagger editor, works in curl with generated example   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_public_attachments_with_http_info(md5sum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Md5sum md5sum: md5 sum of an attachment (required)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['md5sum']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method count_public_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'md5sum' is set
        if ('md5sum' not in params or
                params['md5sum'] is None):
            raise ValueError("Missing the required parameter `md5sum` when calling `count_public_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'md5sum' in params:
            path_params['md5sum'] = params['md5sum']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyQueryParam']  # noqa: E501

        return self.api_client.call_api(
            '/mailstats/common-attachments/{md5sum}/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_attachment(self, email, message_id, attachment_identifier, **kwargs):  # noqa: E501
        """Download email attachment  # noqa: E501

        Download an email message attachment as a file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_attachment(email, message_id, attachment_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmailString email: Email address (required)
        :param MessageId message_id: Mailsac-generated globally unique message identifier (required)
        :param AttachmentIdentifier attachment_identifier: Unique identifier of email attachment (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_attachment_with_http_info(email, message_id, attachment_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.download_attachment_with_http_info(email, message_id, attachment_identifier, **kwargs)  # noqa: E501
            return data

    def download_attachment_with_http_info(self, email, message_id, attachment_identifier, **kwargs):  # noqa: E501
        """Download email attachment  # noqa: E501

        Download an email message attachment as a file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_attachment_with_http_info(email, message_id, attachment_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmailString email: Email address (required)
        :param MessageId message_id: Mailsac-generated globally unique message identifier (required)
        :param AttachmentIdentifier attachment_identifier: Unique identifier of email attachment (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'message_id', 'attachment_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_attachment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `download_attachment`")  # noqa: E501
        # verify the required parameter 'message_id' is set
        if ('message_id' not in params or
                params['message_id'] is None):
            raise ValueError("Missing the required parameter `message_id` when calling `download_attachment`")  # noqa: E501
        # verify the required parameter 'attachment_identifier' is set
        if ('attachment_identifier' not in params or
                params['attachment_identifier'] is None):
            raise ValueError("Missing the required parameter `attachment_identifier` when calling `download_attachment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'email' in params:
            path_params['email'] = params['email']  # noqa: E501
        if 'message_id' in params:
            path_params['messageId'] = params['message_id']  # noqa: E501
        if 'attachment_identifier' in params:
            path_params['attachmentIdentifier'] = params['attachment_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyQueryParam']  # noqa: E501

        return self.api_client.call_api(
            '/addresses/{email}/messages/{messageId}/attachments/{attachmentIdentifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_public_attachment(self, md5sum, **kwargs):  # noqa: E501
        """Download public attachment  # noqa: E501

        Download an attachment with the MD5 sum requested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_public_attachment(md5sum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Md5sum md5sum: md5 sum of an attachment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_public_attachment_with_http_info(md5sum, **kwargs)  # noqa: E501
        else:
            (data) = self.download_public_attachment_with_http_info(md5sum, **kwargs)  # noqa: E501
            return data

    def download_public_attachment_with_http_info(self, md5sum, **kwargs):  # noqa: E501
        """Download public attachment  # noqa: E501

        Download an attachment with the MD5 sum requested.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_public_attachment_with_http_info(md5sum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Md5sum md5sum: md5 sum of an attachment (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['md5sum']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_public_attachment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'md5sum' is set
        if ('md5sum' not in params or
                params['md5sum'] is None):
            raise ValueError("Missing the required parameter `md5sum` when calling `download_public_attachment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'md5sum' in params:
            path_params['md5sum'] = params['md5sum']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyQueryParam']  # noqa: E501

        return self.api_client.call_api(
            '/mailstats/common-attachments/{md5sum}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_message_attachments(self, email, message_id, **kwargs):  # noqa: E501
        """List attachments for an email message  # noqa: E501

        Get attachment metadata on email message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_message_attachments(email, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmailString email: Email address (required)
        :param MessageId message_id: Mailsac-generated globally unique message identifier (required)
        :return: AttachmentMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_message_attachments_with_http_info(email, message_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_message_attachments_with_http_info(email, message_id, **kwargs)  # noqa: E501
            return data

    def list_message_attachments_with_http_info(self, email, message_id, **kwargs):  # noqa: E501
        """List attachments for an email message  # noqa: E501

        Get attachment metadata on email message.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_message_attachments_with_http_info(email, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmailString email: Email address (required)
        :param MessageId message_id: Mailsac-generated globally unique message identifier (required)
        :return: AttachmentMeta
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'message_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_message_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `list_message_attachments`")  # noqa: E501
        # verify the required parameter 'message_id' is set
        if ('message_id' not in params or
                params['message_id'] is None):
            raise ValueError("Missing the required parameter `message_id` when calling `list_message_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'email' in params:
            path_params['email'] = params['email']  # noqa: E501
        if 'message_id' in params:
            path_params['messageId'] = params['message_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyQueryParam']  # noqa: E501

        return self.api_client.call_api(
            '/addresses/{email}/messages/{messageId}/attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AttachmentMeta',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_messages_for_attachment(self, md5sum, **kwargs):  # noqa: E501
        """List public messages with an attachment  # noqa: E501

        List the email messages that have attachments with the requested MD5 sum. Limited to non-private inboxes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_messages_for_attachment(md5sum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Md5sum md5sum: md5 sum of an attachment (required)
        :return: EmailMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_messages_for_attachment_with_http_info(md5sum, **kwargs)  # noqa: E501
        else:
            (data) = self.list_messages_for_attachment_with_http_info(md5sum, **kwargs)  # noqa: E501
            return data

    def list_messages_for_attachment_with_http_info(self, md5sum, **kwargs):  # noqa: E501
        """List public messages with an attachment  # noqa: E501

        List the email messages that have attachments with the requested MD5 sum. Limited to non-private inboxes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_messages_for_attachment_with_http_info(md5sum, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Md5sum md5sum: md5 sum of an attachment (required)
        :return: EmailMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['md5sum']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_messages_for_attachment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'md5sum' is set
        if ('md5sum' not in params or
                params['md5sum'] is None):
            raise ValueError("Missing the required parameter `md5sum` when calling `list_messages_for_attachment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'md5sum' in params:
            path_params['md5sum'] = params['md5sum']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyQueryParam']  # noqa: E501

        return self.api_client.call_api(
            '/mailstats/common-attachments/{md5sum}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EmailMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_public_attachments(self, start_date, end_date, **kwargs):  # noqa: E501
        """Search for attachments  # noqa: E501

        Search for attachments that were received during the requested time period. Limited to non-private inboxes.  Responds with 'Failed to fetch' in swagger editor. Works in curl with generated example.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_public_attachments(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelDate start_date: (required)
        :param ModelDate end_date: (required)
        :param Skip skip:
        :param Limit limit:
        :return: list[CommonAttachments]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_public_attachments_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
        else:
            (data) = self.list_public_attachments_with_http_info(start_date, end_date, **kwargs)  # noqa: E501
            return data

    def list_public_attachments_with_http_info(self, start_date, end_date, **kwargs):  # noqa: E501
        """Search for attachments  # noqa: E501

        Search for attachments that were received during the requested time period. Limited to non-private inboxes.  Responds with 'Failed to fetch' in swagger editor. Works in curl with generated example.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_public_attachments_with_http_info(start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelDate start_date: (required)
        :param ModelDate end_date: (required)
        :param Skip skip:
        :param Limit limit:
        :return: list[CommonAttachments]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'skip', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_public_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `list_public_attachments`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `list_public_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader', 'APIKeyQueryParam']  # noqa: E501

        return self.api_client.call_api(
            '/mailstats/common-attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CommonAttachments]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
